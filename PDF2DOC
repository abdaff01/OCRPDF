import subprocess
import os
import cv2
import numpy as np
import pytesseract
import fitz
import tkinter as tk
from tkinter import filedialog
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from docx import Document
import threading

# Set Tesseract executable path
tesseract_path = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
pytesseract.pytesseract.tesseract_cmd = tesseract_path

# Language codes for OCR
language_codes = {
    'eng': 'English',
    'fra': 'French',
    'deu': 'German',
    'nld': 'Dutch',
    'hun': 'Hungarian',
    'ces': 'Czech',
    'pol': 'Polish',
    'slk': 'Slovakian',
    'slv': 'Slovenian',
    'ron': 'Romanian'
}

# Function to preprocess an image
def preprocess_image(image):
    processed_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    processed_image = cv2.GaussianBlur(processed_image, (3, 3), 0)
    processed_image = cv2.adaptiveThreshold(processed_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    return processed_image

# Function to perform OCR on an image
def perform_ocr(image, language_code):
    try:
        processed_image = preprocess_image(image)
        text = pytesseract.image_to_string(processed_image, lang=language_code, config='--psm 6 --oem 3')
        return text
    except Exception as e:
        print("Error loading image:", e)
        return ""

# Function to convert a PDF to text
def convert_pdf_to_text(pdf_file, selected_language):
    text = ""
    pdf_document = fitz.open(pdf_file)
    for page_num in range(pdf_document.page_count):
        page = pdf_document.load_page(page_num)
        image_list = page.get_images(full=True)
        for img_index, img in enumerate(image_list):
            xref = img[0]
            base_image = pdf_document.extract_image(xref)
            image = np.frombuffer(base_image["image"], np.uint8)
            image = cv2.imdecode(image, cv2.IMREAD_COLOR)
            page_text = perform_ocr(image, language_code=selected_language)
            text += page_text + "\n"
    pdf_document.close()
    return text

# Function to extract text from an image
def extract_text_from_image(image_path, selected_language):
    try:
        image = cv2.imread(image_path)
        text = perform_ocr(image, language_code=selected_language)
        return text
    except Exception as e:
        print("Error loading image:", e)
        return ""

# Function to create a Word document from text content
def create_word_document(output_path, text_content):
    if text_content:
        doc_path = output_path
        doc = Document()
        doc.add_paragraph(text_content)
        doc.save(doc_path)
        subprocess.Popen(['start', '', doc_path], shell=True)
    else:
        print("No text content to create Word document.")

# Class for handling file system events
class FileHandler(FileSystemEventHandler):
    def __init__(self, selected_language, output_dir):
        self.selected_language = selected_language
        self.output_dir = output_dir

    def on_created(self, event):
        if event.is_directory:
            return
        file_extension = os.path.splitext(event.src_path)[1].lower()
        if file_extension == '.pdf':
            t = threading.Thread(target=self.convert_pdf_and_save, args=(event.src_path,))
            t.start()
        elif file_extension in ['.jpg', '.jpeg', '.png', '.bmp']:
            t = threading.Thread(target=self.extract_image_and_save, args=(event.src_path,))
            t.start()

    def convert_pdf_and_save(self, pdf_path):
        text = convert_pdf_to_text(pdf_path, self.selected_language)
        base_name = os.path.splitext(os.path.basename(pdf_path))[0]
        doc_path = os.path.join(self.output_dir, f"{base_name}.docx")
        create_word_document(doc_path, text)
        print("PDF Conversion complete:", doc_path)

    def extract_image_and_save(self, image_path):
        text = extract_text_from_image(image_path, self.selected_language)
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        doc_path = os.path.join(self.output_dir, f"{base_name}.docx")
        create_word_document(doc_path, text)
        print("Image OCR complete:", doc_path)

# Function to browse and select a file
def browse_file():
    file_path = filedialog.askopenfilename(filetypes=[("PDF files and Images", "*.pdf *.jpg *.jpeg *.png *.bmp")])
    source_path.set(file_path)

# Function to choose the output directory
def choose_output_directory():
    output_dir = filedialog.askdirectory()
    output_path.set(output_dir)

# Function to start the conversion process
def start_conversion():
    selected_file_path = source_path.get()
    output_dir = output_path.get()
    selected_language = language_choice.get()
    event_handler = FileHandler(selected_language, output_dir)
    observer = Observer()
    observer.schedule(event_handler, os.path.dirname(selected_file_path), recursive=False)
    observer.start()

    def check_file_and_convert():
        if os.path.exists(selected_file_path):
            observer.stop()
            observer.join()
            if selected_file_path.endswith('.pdf'):
                text = convert_pdf_to_text(selected_file_path, selected_language)
            else:
                text = extract_text_from_image(selected_file_path, selected_language)
            create_word_document(os.path.join(output_dir, "output.docx"), text)

    root.after(1000, check_file_and_convert)

# Create the main application window
root = tk.Tk()
root.title("File to Word Converter")
root.configure(bg='#f5f5f5')

source_path = tk.StringVar()
output_path = tk.StringVar()

source_label = tk.Label(root, text="Select File:", bg='#f5f5f5', fg='black', font=("Helvetica", 14))
source_label.pack()
source_entry = tk.Entry(root, textvariable=source_path)
source_entry.pack(padx=10, pady=5)
browse_button = tk.Button(root, text="Browse", command=browse_file, bg='black', fg='white')
browse_button.pack(pady=5)

output_label = tk.Label(root, text="Output Directory:", bg='#f5f5f5', fg='black', font=("Helvetica", 14))
output_label.pack()
output_entry = tk.Entry(root, textvariable=output_path)
output_entry.pack(padx=50, pady=5)
choose_output_button = tk.Button(root, text="Choose Output Directory", command=choose_output_directory,
                                 bg='black', fg='white')
choose_output_button.pack(pady=5)

language_choice = tk.StringVar()
language_choice.set('eng')  # Set 'English' as the default language
language_label = tk.Label(root, text="Select Language:", bg='#f5f5f5', fg='black', font=("Helvetica", 14))
language_label.pack()
language_menu = tk.OptionMenu(root, language_choice, *language_codes.keys())
language_menu.pack(pady=5)

convert_button = tk.Button(root, text="Convert File to Word", command=start_conversion, bg='black', fg='white',
                           font=("Helvetica", 14))
convert_button.pack(pady=20)

root.geometry("500x500")  # Set the window size

# Start the GUI application
if __name__ == "__main__":
    root.mainloop()
