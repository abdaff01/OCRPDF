import tkinter as tk
from tkinter import filedialog
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from docx import Document
import subprocess
import cv2
import numpy as np
import os
import pytesseract
from pdf2image import convert_from_path
import cv2
import numpy as np
import fitz  # PyMuPDF

os.environ["PATH"] += os.pathsep + 'C:/Users/abdaf/Documents/Python/OCRPDF/bin'

# Set the Tesseract executable path
pytesseract.pytesseract.tesseract_cmd = r'C:/Users/abdaf/PycharmProjects/pythonOCR/Tesseract-OCR/tesseract.exe'


# Language codes for OCR
language_codes = {
    'eng': 'English',
    'fra': 'French',
    'deu': 'German',
    'nld': 'Dutch',
    'hun': 'Hungarian',
    'ces': 'Czech',
    'pol': 'Polish',
    'slk': 'Slovakian',
    'slv': 'Slovenian',
    'ron': 'Romanian'
}

# Function to preprocess an image
def preprocess_image(image):
    processed_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    processed_image = cv2.threshold(processed_image, 128, 255, cv2.THRESH_BINARY)[1]
    return processed_image


# Function to convert PDF to text with language option
def convert_pdf_to_text(pdf_file, languages=['eng']):
    text = ""

    # Use PyMuPDF to extract text
    doc = fitz.open(pdf_file)
    for page_num in range(doc.page_count):
        page = doc[page_num]
        page_text = page.get_text()
        text += f"Page {page_num + 1}:\n{page_text}\n"

    # Perform OCR with each specified language using Tesseract
    for lang in languages:
        if lang != 'eng':
            continue  # Skip English as it's already handled by PyMuPDF
        custom_config = f'--oem 3 --psm 6 -l {lang}+'
        image_texts = pytesseract.image_to_string(processed_image, config=custom_config)
        text += f"Language: {language_codes[lang]}\n{image_texts}\n"

    return text

# Function to check if the image has two columns
def is_two_column_layout(image):
    gray_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    edges = cv2.Canny(gray_image, threshold1=50, threshold2=150)

    # Apply Hough Line Transform to detect vertical lines
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=100, minLineLength=100, maxLineGap=10)

    if lines is not None:
        vertical_lines = [line[0] for line in lines if abs(line[0][0] - line[0][2]) < 10]
        if len(vertical_lines) > 1:
            return True

    return False


# Function to separate columns
def separate_columns(image):
    width, height = image.size
    left_column = image.crop((0, 0, width // 2, height))
    right_column = image.crop((width // 2, 0, width, height))
    return left_column, right_column


# Function for default preprocessing
def default_preprocessing(image):
    processed_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    processed_image = cv2.threshold(processed_image, 128, 255, cv2.THRESH_BINARY)[1]
    return processed_image


# Function to convert PDF to text
def convert_pdf_to_text(pdf_file):
    images = convert_from_path(pdf_file, 200)
    text = ""

    for image in images:
        if is_two_column_layout(image):
            column1, column2 = separate_columns(image)
            column1_text = pytesseract.image_to_string(default_preprocessing(column1))
            column2_text = pytesseract.image_to_string(default_preprocessing(column2))
            text += column1_text + " " + column2_text + '\n'
        else:
            page_text = pytesseract.image_to_string(default_preprocessing(image))
            text += page_text + '\n'

    return text


# Function to create a Word document
def create_word_document(pdf_path, dest_dir, text_content):
    base_name = os.path.splitext(os.path.basename(pdf_path))[0]
    doc_path = os.path.join(dest_dir, f"{base_name}.docx")
    doc = Document()
    doc.add_heading("Converted PDF Content", level=1)
    doc.add_paragraph(text_content)
    doc.save(doc_path)
    subprocess.Popen(['start', '', doc_path], shell=True)


# Watchdog event handler
class PDFHandler(FileSystemEventHandler):
    def on_created(self, event):
        if event.is_directory:
            return
        file_extension = os.path.splitext(event.src_path)[1].lower()
        if file_extension == '.pdf':
            text = convert_pdf_to_text(event.src_path)
            create_word_document(event.src_path, destination_path.get(), text)


# Create GUI window
root = tk.Tk()
root.title("PDF to Word Converter")

# Set custom background color for the window
root.configure(bg='#f5f5f5')

# Title label with custom styling
title_label = tk.Label(root, text="Keyence International", font=("Helvetica", 24), bg='#f5f5f5', fg='red')
title_label.pack(pady=20)


# Function to browse for PDF files
def browse_pdf():
    pdf_file = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
    source_path.set(pdf_file)


# Function to choose destination directory
def choose_destination():
    dest_dir = filedialog.askdirectory()
    destination_path.set(dest_dir)


# Function to start conversion
def start_conversion():
    pdf_path = source_path.get()
    dest_dir = destination_path.get()
    event_handler = PDFHandler()
    observer = Observer()
    observer.schedule(event_handler, os.path.dirname(pdf_path), recursive=False)
    observer.start()

    def check_file_and_convert():
        if os.path.exists(pdf_path):
            observer.stop()
            observer.join()
            text = convert_pdf_to_text(pdf_path)
            create_word_document(pdf_path, dest_dir, text)

    root.after(1000, check_file_and_convert)


# GUI components
source_path = tk.StringVar()
destination_path = tk.StringVar()

source_label = tk.Label(root, text="Source PDF:", bg='#f5f5f5', fg='black', font=("Helvetica", 14))
source_label.pack()
source_entry = tk.Entry(root, textvariable=source_path)
source_entry.pack(padx=10, pady=5)
browse_button = tk.Button(root, text="Browse", command=browse_pdf, bg='black', fg='white')
browse_button.pack(pady=5)

destination_label = tk.Label(root, text="Destination Directory:", bg='#f5f5f5', fg='black', font=("Helvetica", 14))
destination_label.pack()
destination_entry = tk.Entry(root, textvariable=destination_path)
destination_entry.pack(padx=10, pady=5)
choose_dest_button = tk.Button(root, text="Choose Destination", command=choose_destination, bg='black', fg='white')
choose_dest_button.pack(pady=5)

convert_button = tk.Button(root, text="Convert PDF to Word", command=start_conversion, bg='black', fg='white',
                           font=("Helvetica", 14))
convert_button.pack(pady=20)

root.geometry("500x400")  # Set the window size
root.mainloop()
